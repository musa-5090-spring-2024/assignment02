# Install packages if they are not already installed
if (!requireNamespace("osmdata", quietly = TRUE)) install.packages("osmdata")
if (!requireNamespace("sf", quietly = TRUE)) install.packages("sf")
# Load the libraries
library(osmdata)
library(sf)
# Define the area of interest with a specific query for University of Pennsylvania
query <- getbb("University of Pennsylvania", format_out = "polygon") %>%
opq() %>%
add_osm_feature(key = "amenity", value = "university")
# Download the data from OpenStreetMap
osm_data <- query %>%
osmdata_sf()
# Check the data and select the relevant layer
print(osm_data$osm_polygons)
# Assuming 'osm_polygons' contains the campus data, convert it to an sf object
university_sf <- osm_data$osm_polygons
# Specify the path and filename for the shapefile
shapefile_path <- "upenn.shp"
# Write the data to a shapefile
st_write(university_sf, shapefile_path)
plot(university_sf)
View(university_sf)
# Check the data and select the relevant layer
print(osm_data$osm_polygons)
# Assuming 'osm_polygons' contains the campus data, convert it to an sf object
university_sf <- osm_data$osm_polygons
philadelphia_a <- getbb(place_name = "University of Pennsylvania") %>%
opq() %>%
add_osm_feature(key = "amenity",
value = "university")%>%
osmdata_sf()
# Load the libraries
library(osmdata, tidyverse)
library(tidyverse)
philadelphia_a <- getbb(place_name = "University of Pennsylvania") %>%
opq() %>%
add_osm_feature(key = "amenity",
value = "university")%>%
osmdata_sf()
university_sf <- philadelphia_a$osm_polygons
plot(university_sf)
library(tmap)# Specify the path and filename for the shapefile
tm_shape(university_sf)+
tm_polygons()
View(university_sf)
relation_id <- "2594845"
# Fetch the relation data from OpenStreetMap
osm_data <- opq(bbox = "Philadelphia") %>%  # A rough bounding box to initialize the query, though it will be narrowed down
add_osm_id(relation_id, "relation") %>%
osmdata_sf()
osm_data <- opq(bbox = getbb("Philadelphia")) %>%  # Define a bounding box around Philadelphia
add_osm_feature(key = "type", value = "relation", id = relation_id) %>%
osmdata_sf()
??add_osm_features
library(pacman)
p_load(xml2)
xml_file <- read_xml("2594845.osm.xml")
View(xml_file)
summary(xml_file)
nodes <- xml_find_all(xml_file, ".//node")
node_ids <- xml_attr(nodes, "id")
lats <- as.numeric(xml_attr(nodes, "lat"))
lons <- as.numeric(xml_attr(nodes, "lon"))
nodes_df <- data.frame(id = node_ids, lon = lons, lat = lats)
# Convert nodes to an sf object
nodes_sf <- st_as_sf(nodes_df, coords = c("lon", "lat"), crs = 4326, agr = "constant")
nodes <- xml_find_all(xml_file, ".//node")
node_ids <- xml_attr(nodes, "id")
lats <- as.numeric(xml_attr(nodes, "lat"))
lons <- as.numeric(xml_attr(nodes, "lon"))
nodes_df <- data.frame(id = node_ids, lon = lons, lat = lats)
# Convert nodes to an sf object
nodes_sf <- st_as_sf(nodes_df, coords = c("lon", "lat"), crs = 4326, agr = "constant")
library(sf)
xml_file <- read_xml("2594845.osm.xml")
summary(xml_file)
nodes <- xml_find_all(xml_file, ".//node")
node_ids <- xml_attr(nodes, "id")
lats <- as.numeric(xml_attr(nodes, "lat"))
lons <- as.numeric(xml_attr(nodes, "lon"))
nodes_df <- data.frame(id = node_ids, lon = lons, lat = lats)
# Convert nodes to an sf object
nodes_sf <- st_as_sf(nodes_df, coords = c("lon", "lat"), crs = 4326, agr = "constant")
# Extract ways
ways <- xml_find_all(xml_file, ".//way")
way_ids <- xml_attr(ways, "id")
# Process each way to create a list of LINESTRING or POLYGON objects
way_list <- lapply(ways, function(way) {
nd_refs <- xml_find_all(way, ".//nd")
ref_ids <- xml_attr(nd_refs, "ref")
# Match node references to node coordinates
matched_coords <- nodes_df[nodes_df$id %in% ref_ids, ]
# Ensure the order of coordinates matches the order of node references in the way
matched_coords <- matched_coords[match(ref_ids, matched_coords$id), ]
if (!is.na(matched_coords) && nrow(matched_coords) > 1) {
st_sfc(st_linestring(as.matrix(matched_coords[, c("lon", "lat")])))
} else {
NULL
}
})
# Remove NULL entries
way_list <- way_list[!sapply(way_list, is.null)]
# Create an sf object from the list of geometries
if (length(way_list) > 0) {
ways_sf <- do.call(st_sfc, way_list)
st_crs(ways_sf) <- 4326
ways_sf <- st_sf(id = way_ids, geometry = ways_sf)
}
View(ways)
summary(xml_file)
parse_nodes <- function(xml) {
nodes <- xml_find_all(xml, ".//node")
data.frame(
id = xml_attr(nodes, "id"),
lon = as.numeric(xml_attr(nodes, "lon")),
lat = as.numeric(xml_attr(nodes, "lat")),
stringsAsFactors = FALSE
)
}
# Function to parse ways and retrieve node references
parse_ways <- function(xml) {
ways <- xml_find_all(xml, ".//way")
list(
ids = xml_attr(ways, "id"),
node_refs = lapply(ways, function(x) xml_attr(xml_find_all(x, ".//nd"), "ref"))
)
}
# Extract nodes and ways
nodes_df <- parse_nodes(xml_file)
ways_info <- parse_ways(xml_file)
# For each way, find corresponding node coordinates and form a LINESTRING or POLYGON
geometries <- lapply(ways_info$node_refs, function(refs) {
coords <- nodes_df[nodes_df$id %in% refs, c("lon", "lat"), drop = FALSE]
# Ensure the coordinates are in the correct order
coords <- coords[match(refs, coords$id),]
if (!is.na(coords) && nrow(coords) > 2) {
if (refs[1] == refs[length(refs)]) { # Check if the way is closed
st_polygon(list(as.matrix(coords)))
} else {
st_linestring(as.matrix(coords))
}
} else {
NULL
}
})
# Filter out NULL geometries
geometries <- Filter(Negate(is.null), geometries)
# Create an sf object
sfc <- st_sfc(geometries, crs = 4326)
# Depending on the intended structure, combine into a single MULTIPOLYGON
# This assumes all geometries are part of a single multipolygon
multipolygon <- st_combine(sfc)
multipolygon_sf <- st_sf(geometry = st_sfc(multipolygon))
View(multipolygon_sf)
plot(multipolygon_sf)
upenn <- st_read(export.geojson)
upenn <- st_read("export.geojson")
View(upenn)
upenn <- st_union()
upenn <- st_read("export.geojson")%>%
st_union()
View(upenn)
upenn <- st_read("export.geojson")%>%
st_union()%>%
st_as_sf()
plot(upenn)
st_write(upen, "upenn.gejson")
st_write(upen, "upenn.geojson")
st_write(upenn, "upenn.geojson")
landmarks <- read.csv("Landmarks_AGOTrainingOnly.csv")
View(landmarks)
table(landmarks$FEAT_TYPE)
